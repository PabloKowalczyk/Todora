version: '3.4'
services:
    nginx:
        image: "nginx:1.17-alpine"
        depends_on:
            - ssl_gen
            - app
        ports:
            - "8200:443"
        volumes:
            - ./public:/var/www/html/public:ro
            - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./.docker/ssl_gen:/etc/nginx/ssl:ro

    app:
        build:
            context: .
            dockerfile: ./docker/app/Dockerfile
        depends_on:
            - postgres
            - redis
        volumes:
            - ~/.composer:/var/www/.composer
            - .:/var/www/html:cached
            - ./docker/app/php.ini:/usr/local/etc/php/php.ini:ro

    php_builder:
        build:
            context: .
            dockerfile: ./docker/app/Dockerfile
        command: >
            sh -c "
                chown -R www-data:www-data /var/www/.composer &&
                php /var/www/html/docker/app/wait-for-dbs.php &&
                su-exec www-data composer install -o &&
                su-exec www-data composer bin all install -a &&
                su-exec www-data composer todora:migrate:dev &&
                su-exec www-data composer todora:migrate:test
            "
        volumes:
            - ~/.composer:/var/www/.composer
            - .:/var/www/html

    postgres:
        image: 'postgres:12-alpine'
        environment:
            POSTGRES_PASSWORD: todora_dev
            POSTGRES_USER: todora_dev
            POSTGRES_DB: todora_dev
        volumes:
            - ./.docker/db_dev:/var/lib/postgresql/data
        ports:
            - "8201:5432"

    postgres_test:
        image: 'postgres:12-alpine'
        environment:
            POSTGRES_PASSWORD: todora_test
            POSTGRES_USER: todora_test
            POSTGRES_DB: todora_test

    node_builder:
        image: 'node:8-alpine'
        volumes:
            - ./:/app
        working_dir: /app
        user: node
        command: >
            sh -c "
                yarn install &&
                yarn watch
            "

    redis:
        image: 'redis:5.0-alpine'

    ssl_gen:
        image: 'alpine:3.10'
        volumes:
            - ./.docker/ssl_gen:/app
        command: >
            sh -c "
                if [ -f /app/todora.local.crt ] && [ -f /app/todora.local.key ]
                then
                    echo 'SSL certificates already generated';
                    exit 0;
                fi &&
                rm -rf /app/todora.local* &&
                apk add --update openssl &&
                openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /app/todora.local.key \
                    -out /app/todora.local.crt \
                    -subj "/C=PL/ST=Masovian/L=Warsaw/O=PK Ltd/OU=IT Department/CN=todora.local"
            "
