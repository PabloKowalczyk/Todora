server {
    listen 80;

    server_name stage.todora.dev;

    return 301 https://$host$request_uri;
}

server {
    listen 443 ssl http2 deferred;

    server_name stage.todora.dev;
    root /var/www/stage.todora.dev/public;

    ssl_certificate /etc/nginx/ssl/stage.todora.dev.crt;
    ssl_certificate_key /etc/nginx/ssl/stage.todora.dev.key;

    location / {
        # try to serve file directly, fallback to index.php
        try_files $uri /index.php$is_args$args;
    }

    # DEV
    # This rule should only be placed on your development environment
    # In production, don't include this and don't deploy app_dev.php or config.php
    location ~ ^/index\.php(/|$) {
        fastcgi_pass unix:/var/run/php/php7.1-fpm-stage.sock;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;
        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;

        fastcgi_param APP_ENV prod;
        fastcgi_param APP_DEBUG false;
        fastcgi_param APP_SECRET t58gjh54w9h6w450;
        fastcgi_param DATABASE_URL pgsql://todora_dev:todora_dev_password@127.0.0.1:5432/todora_dev?charset=UTF-8&&serverVersion=9.6;
        fastcgi_param REDIS_HOST 127.0.0.1;
        fastcgi_param ADMIN_PASSWORD admin;

        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/app.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    # Expire rules for static content

    # No default expire rule. This config mirrors that of apache as outlined in the
    # html5-boilerplate .htaccess file. However, nginx applies rules by location,
    # the apache rules are defined by type. A consequence of this difference is that
    # if you use no file extension in the url and serve html, with apache you get an
    # expire time of 0s, with nginx you'd get an expire header of one month in the
    # future (if the default expire rule is 1 month). Therefore, do not use a
    # default expire rule with nginx unless your site is completely static

    # cache.appcache, your document html and data
    location ~* \.(?:manifest|appcache|html?|xml|json)$ {
        add_header Cache-Control "max-age=0";
    }

    # Feed
    location ~* \.(?:rss|atom)$ {
        add_header Cache-Control "max-age=3600";
    }

    # Media: images, icons, video, audio, HTC
    location ~* \.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|mp4|ogg|ogv|webm|htc)$ {
        access_log off;
        add_header Cache-Control "max-age=31708800";
    }

    # Media: svgz files are already compressed.
    location ~* \.svgz$ {
        access_log off;
        gzip off;
        add_header Cache-Control "max-age=31708800";
    }

    # CSS and Javascript
    location ~* \.(?:css|js)$ {
#        add_header Cache-Control "max-age=31708800,s-maxage=7200,public,must-revalidate";
        expires max;
        access_log off;
    }

    # WebFonts
    # If you are NOT using cross-domain-fonts.conf, uncomment the following directive
    # location ~* \.(?:ttf|ttc|otf|eot|woff|woff2)$ {
    #  add_header Cache-Control "max-age=2592000";
    #  access_log off;
    # }

    error_log /var/log/nginx/todora_prod_error.log;
    access_log /var/log/nginx/todora_prod_access.log;
}
